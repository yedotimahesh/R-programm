Search or jump toâ€¦ 
Pull requests 
Issues 
Codespaces 
Marketplace 
Explore 
  
@CoderUday  
CoderUday 
/ 
R-programming-week-3 
Public 
Cannot fork because you own this repository and are not a member of any organizations. 
Code 
Issues 
Pull requests 
Actions 
Projects 
Wiki 
Security 
Insights 
Settings 
R-programming-week-3/peergraded 
@CoderUday 
CoderUday Create peergraded 
Latest commit c32c7e0 3 days ago 
 History 
 1 contributor 
54 lines (52 sloc)  1.24 KB 
 
#Caching the Mean of a Vector 
makeVector <- function(x = numeric()) { 
        m <- NULL 
        set <- function(y) { 
                x <<- y 
                m <<- NULL 
        } 
        get <- function() x 
        setmean <- function(mean) m <<- mean 
        getmean <- function() m 
        list(set = set, get = get, 
             setmean = setmean, 
             getmean = getmean) 
} 
cachemean <- function(x, ...) { 
        m <- x$getmean() 
        if(!is.null(m)) { 
                message("getting cached data") 
                return(m) 
        } 
        data <- x$get() 
        m <- mean(data, ...) 
        x$setmean(m) 
        m 
} 
#Caching the Inverse of a Matrix 
makeCacheMatrix <- function(x = matrix()) { 
  j <- NULL 
  set <- function(y){ 
  x <<- y 
  j <<- NULL 
  } 
  get <- function()x 
  setInverse <- function(inverse) j <<- inverse 
  getInverse <- function() j  
  list(set = set, get = get,  
  setInverse = setInverse,  
  getInverse = getInverse) 
} 
 
##Please include your own comment to explain your code (Required in Rubric) 
 
cacheSolve <- function(x, ...) { 
## Return a matrix that is the inverse of 'x' 
  j <- x$getInverse() 
  if(!is.null(j)){ 
  message("getting cached data") 
  return(j) 
  } 
  mat <- x$get() 
  j <- solve(mat,...) 
  x$setInverse(j) 
  j 
}
